datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator prismaCRUDGenerator {
  provider = "npx prisma-generator-crud"
  output   = "./generated"
}

model AppConfig {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  value     String?
  key       String?   @unique
}

model User {
  id                  String            @id @default(dbgenerated("gen_random_uuid()"))
  createdAt           DateTime          @default(now())
  updatedAt           DateTime?         @updatedAt
  deletedAt           DateTime?
  email               String            @unique
  firstName           String?
  lastName            String?
  username            String            @unique
  password            String?
  isValid             Boolean?
  roles               String[]
  latitude            Float?
  longitude           Float?
  skills              String[]
  phoneNumber         Int?
  preferencesCategory String[]
  preferencesLocation String[]
  professionCategory  String[]
  Annonce             Annonce[]
  Interaction         Interaction[]
  InteractionUserBy    InteractionUser[]  @relation("regularuser")
  InteractionUser     InteractionUser[]  @relation("prouser")
  
}

model Annonce {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  deletedAt    DateTime?
  title        String?
  content      String?
  userId       String
  endDate      DateTime?
  annonceType  String?
  longitude    Float?
  latitude     Float?
  interactions String?
  user         User          @relation(fields: [userId], references: [id])
  Interaction  Interaction[]
}

model Interaction {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?
  userIdI         String
  annonceId       String
  interactionType String?
  user            User      @relation(fields: [userIdI], references: [id])
  annonce         Annonce   @relation(fields: [annonceId], references: [id])
}

model InteractionUser {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  deletedAt          DateTime?
  userId_1           String
  userId_2           String
  interactionType    String?
  date               DateTime?
  status             String?
  user_id_1_relation User      @relation("regularuser", fields: [userId_1], references: [id])
  user_id_2_relation User      @relation("prouser",fields: [userId_2], references: [id])
}
